{"version":3,"sources":["logo.svg","components/input-params/inputParams.jsx","components/algo-params/algoParams.jsx","pages/form-params/formParams.page.jsx","pages/home/home.page.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","InputParams","Card","className","CardHeader","title","CardContent","noValidate","autoComplete","FormControl","fullWidth","margin","TextField","label","Tooltip","aria-label","InfoRounded","FormLabel","RadioGroup","row","name","FormControlLabel","value","control","Radio","AlgoParams","InputLabel","id","Select","labelId","MenuItem","Input","type","inputProps","step","FormParams","Box","Component","HomePage","exact","path","component","App","Fragment","CssBaseline","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sIAAAA,EAAOC,QAAU,IAA0B,kC,oSCsC5BC,MAlCf,WACE,OACE,kBAACC,EAAA,EAAD,CAAMC,UAAU,QACd,kBAACC,EAAA,EAAD,CAAYC,MAAM,eAAeF,UAAU,iBAC3C,kBAACG,EAAA,EAAD,CAAaH,UAAU,cACrB,0BAAMA,UAAU,qBAAqBI,YAAU,EAACC,aAAa,OAC3D,kBAACC,EAAA,EAAD,CAAaC,WAAW,EAAMC,OAAO,SACnC,kBAACC,EAAA,EAAD,CAAWC,MAAM,wBAAwBV,UAAU,iBACnD,kBAACW,EAAA,EAAD,CAAST,MAAM,OAAOU,aAAW,QAC/B,kBAACC,EAAA,EAAD,QAGJ,kBAACP,EAAA,EAAD,CAAaC,WAAW,EAAMC,OAAO,SACnC,kBAACM,EAAA,EAAD,CAAWd,UAAU,cAArB,8BACA,kBAACe,EAAA,EAAD,CAAYC,KAAG,EAACJ,aAAW,kBAAkBK,KAAK,gBAAgBjB,UAAU,gBAC1E,kBAACkB,EAAA,EAAD,CAAkBC,MAAM,MAAMC,QAAS,kBAACC,EAAA,EAAD,MAAWX,MAAM,QACxD,kBAACQ,EAAA,EAAD,CAAkBC,MAAM,KAAKC,QAAS,kBAACC,EAAA,EAAD,MAAWX,MAAM,QAEzD,kBAACC,EAAA,EAAD,CAAST,MAAM,OAAOU,aAAW,QAC/B,kBAACC,EAAA,EAAD,QAGJ,kBAACP,EAAA,EAAD,CAAaC,WAAW,EAAMC,OAAO,SACnC,kBAACC,EAAA,EAAD,CAAWC,MAAM,sBAAsBV,UAAU,iBACjD,kBAACW,EAAA,EAAD,CAAST,MAAM,OAAOU,aAAW,QAC/B,kBAACC,EAAA,EAAD,Y,oCC+CCS,MAxEf,WACE,OACE,kBAACvB,EAAA,EAAD,CAAMC,UAAU,QACd,kBAACC,EAAA,EAAD,CAAYC,MAAM,cAAcF,UAAU,iBAC1C,kBAACG,EAAA,EAAD,CAAaH,UAAU,cACrB,0BAAMA,UAAU,oBAAoBI,YAAU,EAACC,aAAa,OAC1D,kBAACC,EAAA,EAAD,CAAaC,WAAW,EAAMC,OAAO,SACnC,kBAACM,EAAA,EAAD,CAAWd,UAAU,cAArB,yBACA,kBAACe,EAAA,EAAD,CAAYC,KAAG,EAACJ,aAAW,wBAAwBK,KAAK,uBAAuBjB,UAAU,gBACvF,kBAACkB,EAAA,EAAD,CAAkBC,MAAM,MAAMC,QAAS,kBAACC,EAAA,EAAD,MAAWX,MAAM,QACxD,kBAACQ,EAAA,EAAD,CAAkBC,MAAM,KAAKC,QAAS,kBAACC,EAAA,EAAD,MAAWX,MAAM,QAEzD,kBAACC,EAAA,EAAD,CAAST,MAAM,OAAOU,aAAW,QAC/B,kBAACC,EAAA,EAAD,QAGJ,kBAACP,EAAA,EAAD,CAAaC,WAAW,EAAMC,OAAO,SACnC,kBAACM,EAAA,EAAD,CAAWd,UAAU,cAArB,eACA,kBAACe,EAAA,EAAD,CAAYC,KAAG,EAACJ,aAAW,cAAcK,KAAK,YAAYjB,UAAU,gBAClE,kBAACkB,EAAA,EAAD,CAAkBC,MAAM,MAAMC,QAAS,kBAACC,EAAA,EAAD,MAAWX,MAAM,QACxD,kBAACQ,EAAA,EAAD,CAAkBC,MAAM,KAAKC,QAAS,kBAACC,EAAA,EAAD,MAAWX,MAAM,QAEzD,kBAACC,EAAA,EAAD,CAAST,MAAM,OAAOU,aAAW,QAC/B,kBAACC,EAAA,EAAD,QAGJ,kBAACP,EAAA,EAAD,CAAaC,WAAW,EAAMC,OAAO,SACnC,kBAACe,EAAA,EAAD,CAAYC,GAAG,wBAAwBxB,UAAU,cAAjD,gCACA,kBAACyB,EAAA,EAAD,CAAQC,QAAQ,wBAAwB1B,UAAU,2BAChD,kBAAC2B,EAAA,EAAD,CAAUR,MAAM,IACd,qCAEF,kBAACQ,EAAA,EAAD,CAAUR,MAAO,6BAAjB,mCAEF,kBAACR,EAAA,EAAD,CAAST,MAAM,OAAOU,aAAW,QAC/B,kBAACC,EAAA,EAAD,QAGJ,kBAACP,EAAA,EAAD,CAAaC,WAAW,EAAMC,OAAO,SACnC,kBAACM,EAAA,EAAD,CAAWd,UAAU,cAArB,4BACA,kBAAC4B,EAAA,EAAD,CAAOC,KAAK,SAASC,WAAY,CAAEC,KAAM,OAAS/B,UAAU,iBAC5D,kBAACW,EAAA,EAAD,CAAST,MAAM,OAAOU,aAAW,QAC/B,kBAACC,EAAA,EAAD,QAGJ,kBAACP,EAAA,EAAD,CAAaC,WAAW,EAAMC,OAAO,SACnC,kBAACM,EAAA,EAAD,CAAWd,UAAU,cAArB,wBACA,kBAAC4B,EAAA,EAAD,CAAOC,KAAK,SAASC,WAAY,CAAEC,KAAM,OAAS/B,UAAU,iBAC5D,kBAACW,EAAA,EAAD,CAAST,MAAM,OAAOU,aAAW,QAC/B,kBAACC,EAAA,EAAD,QAGJ,kBAACP,EAAA,EAAD,CAAaC,WAAW,EAAMC,OAAO,SACnC,kBAACM,EAAA,EAAD,CAAWd,UAAU,cAArB,yBACA,kBAAC4B,EAAA,EAAD,CAAOC,KAAK,SAAS7B,UAAU,iBAC/B,kBAACW,EAAA,EAAD,CAAST,MAAM,OAAOU,aAAW,QAC/B,kBAACC,EAAA,EAAD,QAGJ,kBAACP,EAAA,EAAD,CAAaC,WAAW,EAAMC,OAAO,SACnC,kBAACM,EAAA,EAAD,CAAWd,UAAU,cAArB,0BACA,kBAAC4B,EAAA,EAAD,CAAOC,KAAK,SAAS7B,UAAU,iBAC/B,kBAACW,EAAA,EAAD,CAAST,MAAM,OAAOU,aAAW,QAC/B,kBAACC,EAAA,EAAD,YCzCCmB,EAnBf,uKAMI,OACE,kBAACC,EAAA,EAAD,CAAKjC,UAAU,kBACb,kBAACiC,EAAA,EAAD,CAAKjC,UAAU,gBACb,kBAAC,EAAD,OAEF,kBAACiC,EAAA,EAAD,CAAKjC,UAAU,gBACb,kBAAC,EAAD,YAZV,GAAgCkC,aCWjBC,EAZE,WACf,OACE,kBAACF,EAAA,EAAD,CAAKjC,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,IAAIC,UAAWN,QCc5BO,MAnBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAACC,EAAA,EAAD,MACA,yBAAKzC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK0C,IAAKC,IAAM3C,UAAU,WAAW4C,IAAI,SACzC,wDAIF,yBAAK5C,UAAU,YACb,kBAAC,EAAD,UCNU6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f00f2fc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\nimport { Card, CardHeader, CardContent, FormControl, FormControlLabel, FormLabel, Radio, RadioGroup, TextField, Tooltip } from '@material-ui/core'\nimport { InfoRounded } from '@material-ui/icons'\n\nfunction InputParams() {\n  return (\n    <Card className=\"card\">\n      <CardHeader title=\"Input Params\" className=\"card--header\"></CardHeader>\n      <CardContent className=\"card--body\">\n        <form className=\"form--input-params\" noValidate autoComplete=\"off\">\n          <FormControl fullWidth={true} margin=\"dense\">\n            <TextField label=\"Index of Label Column\" className=\"field--input\" />\n            <Tooltip title=\"Info\" aria-label=\"info\">\n              <InfoRounded></InfoRounded>\n            </Tooltip>\n          </FormControl>\n          <FormControl fullWidth={true} margin=\"dense\">\n            <FormLabel className=\"text--left\">Automatic Cat. Column Flag</FormLabel>\n            <RadioGroup row aria-label=\"auto-cat-column\" name=\"autoCatColumn\" className=\"field--input\">\n              <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\n              <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\n            </RadioGroup>\n            <Tooltip title=\"Info\" aria-label=\"info\">\n              <InfoRounded></InfoRounded>\n            </Tooltip>\n          </FormControl>\n          <FormControl fullWidth={true} margin=\"dense\">\n            <TextField label=\"Categorical Columns\" className=\"field--input\" />\n            <Tooltip title=\"Info\" aria-label=\"info\">\n              <InfoRounded></InfoRounded>\n            </Tooltip>\n          </FormControl>\n        </form>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default InputParams\n","import React from 'react'\nimport { Card, CardHeader, CardContent, FormControl, FormControlLabel, FormLabel, Input, InputLabel, MenuItem, Radio, RadioGroup, Select, Tooltip } from '@material-ui/core'\nimport { InfoRounded } from '@material-ui/icons';\n\nfunction AlgoParams() {\n  return (\n    <Card className=\"card\">\n      <CardHeader title=\"Algo Params\" className=\"card--header\"></CardHeader>\n      <CardContent className=\"card--body\">\n        <form className=\"form--algo-params\" noValidate autoComplete=\"off\">\n          <FormControl fullWidth={true} margin=\"dense\">\n            <FormLabel className=\"text--left\">Hyperparameter tuning</FormLabel>\n            <RadioGroup row aria-label=\"hyperparameter-tuning\" name=\"hyperparameterTuning\" className=\"field--input\">\n              <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\n              <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\n            </RadioGroup>\n            <Tooltip title=\"Info\" aria-label=\"info\">\n              <InfoRounded></InfoRounded>\n            </Tooltip>\n          </FormControl>\n          <FormControl fullWidth={true} margin=\"dense\">\n            <FormLabel className=\"text--left\">K Fold Flag</FormLabel>\n            <RadioGroup row aria-label=\"k-fold-flag\" name=\"kFoldFlag\" className=\"field--input\">\n              <FormControlLabel value=\"yes\" control={<Radio />} label=\"Yes\" />\n              <FormControlLabel value=\"no\" control={<Radio />} label=\"No\" />\n            </RadioGroup>\n            <Tooltip title=\"Info\" aria-label=\"info\">\n              <InfoRounded></InfoRounded>\n            </Tooltip>\n          </FormControl>\n          <FormControl fullWidth={true} margin=\"dense\">\n            <InputLabel id=\"train-test-split-type\" className=\"text--left\">Train Test Random Split Type</InputLabel>\n            <Select labelId=\"train-test-split-type\" className=\"text--left field--input\">\n              <MenuItem value=\"\">\n                <em>None</em>\n              </MenuItem>\n              <MenuItem value={\"trainTestRandomSplitType0\"}>Train Test Random Split Type 0</MenuItem>\n            </Select>\n            <Tooltip title=\"Info\" aria-label=\"info\">\n              <InfoRounded></InfoRounded>\n            </Tooltip>\n          </FormControl>\n          <FormControl fullWidth={true} margin=\"dense\">\n            <FormLabel className=\"text--left\">Training Data Percentage</FormLabel>\n            <Input type=\"number\" inputProps={{ step: \"0.1\" }} className=\"field--input\" />\n            <Tooltip title=\"Info\" aria-label=\"info\">\n              <InfoRounded></InfoRounded>\n            </Tooltip>\n          </FormControl>\n          <FormControl fullWidth={true} margin=\"dense\">\n            <FormLabel className=\"text--left\">Test Data Percentage</FormLabel>\n            <Input type=\"number\" inputProps={{ step: \"0.1\" }} className=\"field--input\" />\n            <Tooltip title=\"Info\" aria-label=\"info\">\n              <InfoRounded></InfoRounded>\n            </Tooltip>\n          </FormControl>\n          <FormControl fullWidth={true} margin=\"dense\">\n            <FormLabel className=\"text--left\">Maximum Depth of Tree</FormLabel>\n            <Input type=\"number\" className=\"field--input\" />\n            <Tooltip title=\"Info\" aria-label=\"info\">\n              <InfoRounded></InfoRounded>\n            </Tooltip>\n          </FormControl>\n          <FormControl fullWidth={true} margin=\"dense\">\n            <FormLabel className=\"text--left\">Maximum Number of Bins</FormLabel>\n            <Input type=\"number\" className=\"field--input\" />\n            <Tooltip title=\"Info\" aria-label=\"info\">\n              <InfoRounded></InfoRounded>\n            </Tooltip>\n          </FormControl>\n        </form>\n      </CardContent>\n    </Card>\n  )\n}\n\nexport default AlgoParams\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Box } from '@material-ui/core';\n\nimport InputParams from '../../components/input-params/inputParams'\nimport AlgoParams from '../../components/algo-params/algoParams'\n\nexport class FormParams extends Component {\n  static propTypes = {\n\n  }\n\n  render() {\n    return (\n      <Box className=\"card-container\">\n        <Box className=\"card-wrapper\">\n          <InputParams></InputParams>\n        </Box>\n        <Box className=\"card-wrapper\">\n          <AlgoParams></AlgoParams>\n        </Box>\n      </Box>\n    )\n  }\n}\n\nexport default FormParams\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom'\nimport { Box } from '@material-ui/core';\n\nimport FormParams from '../form-params/formParams.page'\n\nconst HomePage = () => {\n  return (\n    <Box className=\"home\">\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={FormParams} />\n        </Switch>\n      </Router>\n    </Box>\n  );\n};\n\nexport default HomePage\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport logo from './logo.svg';\nimport HomePage from './pages/home/home.page';\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <div>\n            React Forms with Redux\n          </div>\n        </header>\n        <div className=\"App-body\">\n          <HomePage />\n        </div>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}